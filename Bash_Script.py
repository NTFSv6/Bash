
# >-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# 4%%                                                                        Bash Script For linux
# 3%%-----------------------------------------------------------------                                      -----------------------------------------------------------------------------

# C% https://www.freecodecamp.org/news/shell-scripting-crash-course-how-to-write-bash-scripts-in-linux/
# 3%% https://phoenixnap.com/kb/bash-read

# P#                                                                      touch omar.sh => لعمل ملف ال Bash

# ? read first_name => نستخدم كلمه read ثم بعدها اسم المتغير لعمل input للمستخدم يضع به مايريد
# @@ EX >> read firsnm >> echo $firsnm

# ? لعمل عمليه حسابيه نستخدم قبلها كلمه  'expr العمليه '
# @@ EX >> `expr $fn + $sn`
# ? وفي عمليه الضرب نحتاج ان نعمل Esc Char من خلال \*
# @@ EX >> `expr $fn \* $sn`

# ? نستخدم علامه ال ?$ لمعرفه هل اخر عمليه تمت بشكل صحيح ام لا
# @@ EX >> echo $?

# ? نستخدم بداخل ال ملف المستخدم علامات معينه لتسهيل العمليه
# @@ EX >> username=$1 ... passwd=$2 >> هذا بداخل ملف ال bash
# @@ EX >> echo 'US:'$username 'Pw:'$passwd >> هذا بداخل ملف ال bash ايضا
# @@ bash omar.sh eldeep passdeep >> لتسهيل العمليه حين تفعيل ال Bash نكتب الاشباء الملطلوبه عليه حسب ال possion بتعها

# !                                                                           هذه القيم تستخدم فقط ف الارقام

# ? Equality	              ( تساوي )     num1 -eq num2 is num1 equal to num2
# @@ EX > 5 == 5  (   -eq   )

# ? Greater than equal to ( اكبر او تساوي )          num1 -ge num2 is num1 greater than equal to num2
# @@ EX > 5 >= 5 (   -ge   )

# ? Greater than	     ( اكبر من )                num1 -gt num2 is num1 greater than num2
# @@ EX > 5 > 5 (   -gt   )

# ? Less than equal to	( اصغر او تساوي )           num1 -le num2 is num1 less than equal to num2
# @@ EX > 5 <= 5 (   -le   )

# ? Less than	  ( اصغر من )                      num1 -lt num2 is num1 less than num2
# @@ EX > 5 < 5 (   -lt   )

# ? Not Equal to	      ( لا تساوي )             num1 -ne num2 is num1 not equal to num2
# @@ EX > 5 != 5 (   -ne   )

# ? < (("$a" < "B")) هل ال $a اصغر من ال $B لمقارنه عدد صحيح

# ? <= (("$a" <= "B")) هل ال $a اصغر او تساوي ال $B

# ? > (("$a" > "B")) هل ال $a اكبر من ال $B

# ? >= (("$a" >= "B")) هل ال $a اكبر من او يساوي ال $B

# !                                                                           هذه القيم تستخدم فقط ف ال sTRING

# @@ [ $word = 'a' ] لمقانره String  نستخدم [ ASCII ]

# @@ [ $word == 'a' ] لمقانره String  نستخدم [ ASCII ]

# @@ [ $word != 'a' ] لمقانره String  نستخدم [ ASCII ]

# @@ [[ $word > 'a' ]] لمقانره String  نستخدم [[ ASCII ]]

# @@ [[ $word < 'a' ]] لمقانره String  نستخدم [[ ASCII ]]

# ? -n s1	string s1 is not empty EX >> -n $name بيشوف هل المتغير string ومش فاضي ولا لا

# ? -z s1	string s1 is empty  EX >> -z $name بيشوف هل المتغير string وفاضي ولا لا

# ? <	less then

# ? ( > )	greater then

# ? !=	not equal

# ? =	equal
# >-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# -b filename	Block special file

# -c filename	Special character file

# -d directoryname	Check for directory existence > تحقق من وجود مجلد وليس ملف

# -e filename	Check for file existenc > تحقق من وجود اي نوع من الملفات

# -f filename	Check for regular file existence not a directory > تحقق من وجود ملف عادي وليس مجلد

# -G filename	Check if file exists and is owned by effective group ID.

# -g filename	true if file exists and is set-group-id.

# -k filename	Sticky bit

# -L filename	Symbolic link > ارتباط رمزي

# -O filename	True if file exists and is owned by the effective user id.

# -r filename	Check if file is a readable > تحقق مما إذا كان الملف قابل للقراءة

# -S filename	Check if file is socket

# -s filename	Check if file is nonzero size > تحقق مما إذا كان الملف فارغ ام لا

# -u filename	Check if file set-ser-id bit is set >

# -w filename	Check if file is writable > تحقق مما إذا كان الملف قابل للكتابة

# -x filename	Check if file is executable > تحقق مما إذا كان الملف قابل للتنفيذ

# ?(  -a  ) >> AND ال 2 لازم يكونو صح
# @@EX > 150 -gt 100 -a 150 -gt 120

# ?(  -o  ) >> OR واحده علي الاقل تكون صح
# @@EX > 150 -gt 100 -o 150 -gt 120

# ? نستخدم عمليه ال while لعمل loop
# @@ EX > count=0
# @@ EX >while [ $count -lt 11 ]
# @@ EX >do
# @@ EX >	echo 'While Loop' $count
# @@ EX >	count=`expr $count + 1`
# @@ EX >done

# ? نستخدم عمليه ال until لعمل loop بتعكس العمليه اذا كانت العمليه المستخدمه غير صحيحه نفذ الكود
# @@ EX > count=0
# @@ EX >until [ $count -lt 11 ]
# @@ EX >do
# @@ EX >	echo 'until Loop' $count
# @@ EX >	count=`expr $count + 1`
# @@ EX >done

# ? نستخدم ال for طبعا غانيه عن التعريف
# @@ EX >all='1,2,3,4,5'
# @@ EX >for item in $all
# @@ EX >do
# @@ EX >	echo $item
# @@ EX >done

# C% break _ continue _ sleep
# ? break >> عندما تصل للشي الذي تم تحديده وقف ال loop
# ? continue >> عندما تصل للشي الذي تم تحديده تفاده اكنا مش موجود
# ? sleep >> تستخدم للتوقف لثواني معدوده علي حسب ما تضع انت
# ! sleep numberSec
# @@ EX > sleep 1
# >-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# !                                                                                Adv Bashing Script (ENGLISH)
# >----------------------------------------------------------   ------------------------------------------------------------------------------------------------------------------------
# 4%% read input in bashing
# @@ read user1 >> تتسخدم لوضع اسم المستخدم وجعله Input
# _ user_var => اسم المتغير المستخدم
# ? -p > نسخدمها لكتابه المحتوي بجانب ال read علي سطر واحد
# ? -sp > نسخدمها لكتابه المحتوي بجانب ال read علي سطر واحد واخفاء المحتوي
# ? -a > نستخدمها لوضع اكثر من عنصر داخل Array وللمناده عليه نستخدم للمناده علي الجميع نستخدم علامه @ لممناده علي او عنصر نستخدم ال index بتاعه

# 0%% >> read -p 'username: ' user_var >> normal input
# @@ >> echo "Hello US: $user_var"

# 0%% >> read -sp 'passwd: ' pass_var >> Hideen input
# @@ >> echo "Hello PW: $pass_var"

# 0%% >> read -a names
# @@ >>  echo "Names : ${names[@]}"
# @@ echo "Names : ${names[0]} , ${names[1]} , ${names[2]}"

# 0%% >> read > لعمل  Array ايضا والمناده عليه من خلال
# @@ >> echo "Names: $REPLY"
# >----------------------------------------------------------   ------------------------------------------------------------------------------------------------------------------------
# !                                                                                   علامات ال (  $  )
# >----------------------------------------------------------   ------------------------------------------------------------------------------------------------------------------------
# ? يتم استخدام هذه الاشياء في ال terminal او بداخل ال bash
# _ https://javarevisited.blogspot.com/2011/06/special-bash-parameters-in-script-linux.html

# @@ set omar ashraf 12 66 >> تستخدم لوضع قيم معينه لل echo

# @@ echo $0 >> يطبع لك اسم الملف المستخدم >> ./omar.sh

# @@ echo $# >> لمعرفه عدد القيم الذي تم وضها بال set

# @@ echo $* >> لمعرفه القيم ذات نفسها كلها الذي تم وضعها بال set

# @@ echo $$ >> لمعرفه ال Cash ID بتاع ال المكان الي انت في

# @@ echo $@ >> تستخدم لطباعه المحتوي الذي تم كتابته كله
# >----------------------------------------------------------   ------------------------------------------------------------------------------------------------------------------------
# !                                                                              if_elif_else Adv
# >----------------------------------------------------------   ------------------------------------------------------------------------------------------------------------------------
# ? نستخدم -e علشان نعمل تفادي للي وره ال back slash
# ? بعدل استخدام -e نستخدم \c لجعل ال read في نفس سطر ال echo
# @@ echo -e "Enter File Name: \c"
# @@ read file_name   >>  Enter File Name: games
# @@ if [ -e $file_name ]; then .... نستخدم -e >> تحقق من وجود الملف
# @@ if [ -f $file_name ]; then .... نستخدم -f >> تحقق من وجود الملف ليس مجلد
# @@ if [ -d $file_name ]; then .... نستخدم -d >> تحقق من وجود مجلد ليس ملف
# @@  echo "$file_name found"
# @@ else
# @@  echo "$file_name neNot Found"
# @@ fi

# !                                                                                    and_or

# ? and يوجد 3 اشكال لل >> -a && >> if [[ "$age" -eq 18 && "$age" -eq 30 ]] , if [ "$age" -eq 18 -a "$age" -eq 30 ] , if [ "$age" -eq 18 ] && [ "$age" -eq 30 ]

# ? or يوجد 3 اشكال لل >> -o || >> if [[ "$age" -eq 18 || "$age" -eq 30 ]] , if [ "$age" -eq 18 -o "$age" -eq 30 ] , if [ "$age" -eq 18 ] || [ "$age" -eq 30 ]

# >----------------------------------------------------------   ------------------------------------------------------------------------------------------------------------------------
# !                                                                             العمليات الحسابيه
# >----------------------------------------------------------   ------------------------------------------------------------------------------------------------------------------------
# ? اول شكل لعمل العمليات الحسابيه >> echo $(( 5 + 5 )) , echo $(( numb1 + numb2 )) وينطبق علي جميع العمليات بدون اي تغير

# ? ثاني شكل لعمل العمليات الحسابيه >> echo $(expr 5 + 5 ) , echo $(expr $a + $b ) وينطبق علي باقي العمليات معاده ال الضرب يتم عملها بهذا الشكل , echo $(expr 5 \* 5 )

# ? طريقه العمليه الحسابيه علي رقم عشري >> echo "5.7 + 9.3" | bc , echo "$a + $b" | bc وينطبق علي باقي العمليات بكشل طبيعي وعادي

# ? echo `expr 5.7+9.3 | bc` > echo `expr $a+$b | bc`

# ? للتحكم في عدد الارقام العشريه نستخدم scale ثم عدد الارقام العشريه الذي نريد انت تظهر ونستخدم -l لكي يمكننا استخدام العمليه بشكل طبيعي>> echo "scale=5;20.5/5" | bc -l

# echo "scale=5;sqrt(20.5/5)" | bc -l >> نستخدم function sqrt()

# >----------------------------------------------------------   ------------------------------------------------------------------------------------------------------------------------
# !                                                                              loop case_for_while_until_Select

#                                                                                       0%% case
# >----------------------------------------------------------   ------------------------------------------------------------------------------------------------------------------------

# ? نستخدم ال case ونضع فيها الشي المستخدم ثم نضع المدخلات المتوقعه واذا كان الذي تم ادخاله صحيح سوف يتم تنفيذ شي معين
# val=$1
# @@ case $val in
# 	 'cars')
# 	  echo "Rent of $val is 700$" ;;
# 	 'pc')
# 	   echo "Rent of $val is 1000$";;
# 	 'cat')
# 	  echo "Rent of $val is 170$" ;;
# 	 'dog')
# 	   echo "Rent of $val is 200$";;
# P#  * )  => نستخدم * بمعني ال ELSE اذا لم يتحقق شي من المحدد سوف يتم تنفيذ هذه
#     echo "else Faild";;
# @@ esac >> لقفل العمليه
# >----------------------------------------------------------   ------------------------------------------------------------------------------------------------------------------------
# 0%%                                                                                      while_Sleep
# >----------------------------------------------------------   ------------------------------------------------------------------------------------------------------------------------

# n=0

# while [ $n -le 10 ];do

# while (( $n <= 10 ));do

# echo "$n"

# n=$(( $n+1 ))

##  (( ++n ))

#  (( n++ ))

#  xterm &

#  sleep 5 >> طريقه استخدم ال Sleep نضع بجانبها عدد الثواني الذي نريد فعل شي معين حينها

# done
# >----------------------------------------------------------   ------------------------------------------------------------------------------------------------------------------------
# 0%%                                                                                    while_read_file
# >----------------------------------------------------------   ------------------------------------------------------------------------------------------------------------------------
# C% read: reference >> https://ss64.com/bash/read.html       filename>>( while_openfile.sh)

# while read p;do
# echo $p
#done < Adv_bash3.sh


# cat /etc/miredo.conf | while read p;do
# echo $p
# done


# while IFS= read -r line ;do
#  echo $line
# done < /etc/host.conf

# >----------------------------------------------------------   ------------------------------------------------------------------------------------------------------------------------
# 0%%                                                                                   UNTIL
# >----------------------------------------------------------   ------------------------------------------------------------------------------------------------------------------------
# ? اذا كانت العمليه الذي تحدث خطا سوف ينفذ الكود بشكل طبيعي اول لمه العمليه تبقي صح سوف يوقف ال loop
# ! نفس كل شي مثل ال while
# n=1

# # until [ $n -gt 10 ];do

# until (( $n > 10 ));do

#  echo $n

# n=$(( $n+1 ))

#  (( n++ ))

# done

# >----------------------------------------------------------   ------------------------------------------------------------------------------------------------------------------------
# 0%%                                                                                   for
# >----------------------------------------------------------   ------------------------------------------------------------------------------------------------------------------------
# @@ echo ${BASH_VERSION} > Verison Bash نستخدمه لمعرفه ما اصدار ال bash
# for i in {1..15..3};do #{START..END..SETP} #4%% يمكننا عمل loop علي ارقام معينه ويمكنك التحديد من كذا الي كذا وفي كل مره ينط كام رقم

# for (( i=0; i<=5; i++ ));do شكل كتابه كود ال for ينطبق عليه بعض الاشكال

#  echo $i ;done
# >-------------------
# for command in ls pwd whoami ;do >> # C% هنا تم عمل loop علي بعض الاوامر وسوف يتم تطبيقها من خلال ال سطر ال ( 311 )

# echo "------------$command------------"

# $command;done                  #todo

# >-------------------
# for item in * ;do >> # ^^ نستخدم ال * لعمل loop علي كل عناصر الفولدر الذي نحن في الان

#  if [ -d "$item" ];then >> # ^^ اذا كان ال item مجلد سوف يطبع لك ان المجلد موجود واسمه

#    echo "found Dir Name: "$item

#  elif [ -f "$item" ];then >> # ^^ اذا كان ال item ملف سوف يطبع لك ان الملف موجود واسمه

#  echo "found Folder Name: "$item

#    fi
# done
# >----------------------------------------------------------   ------------------------------------------------------------------------------------------------------------------------
# 0%%                                                                                   Select
# >----------------------------------------------------------   ------------------------------------------------------------------------------------------------------------------------

# ! نستخدم ال Select لوضع رقم امام كل عنصر بعد تشغيل ال script عند اختيار رقم معين سوف ينفذ لك الكود الذي بداخله
# 1) ls
# 2) pwd
# 3) whoami
# 4) ifconfig
# #? 1

# select i in ls pwd whoami ifconfig  > # @@ هنا عناصر الذي سوف يتم استخدمها من خلال ال select
# do
# case $i in
#  ls)
#   echo "Command Is: $i. to out press cltr+d"
#   $i;;

#  pwd)
#   echo "Command Is: $i. to out press cltr+d"
#   $i;;

#  whoami)
#   echo "Command Is: $i. to out press cltr+d"
#   $i;;

#  ifconfig)
#   echo "Command Is: $i. to out press cltr+d"
#   $i;;

#   *)
#     echo "Error Can't found Number. provide the num between 1..4"
# esac
# done

# for (( o=1 ; o<=10 ; o++ ));do

#  if (( $o == 6 || $o == 9));then
 
#   continue;fi
  
#   echo $o;done
# >--------------------

# for (( o=1 ; o<=10 ; o++ ));do

#  if (( $o == 6));then
 
#   break;fi
  
#   echo $o;done
# # >----------------------------------------------------------   ----------------------------------------------------------------------------------------------------------------------
# 0%%                                                                                   function
# >----------------------------------------------------------   ------------------------------------------------------------------------------------------------------------------------

# >----------------------------------------------------------   ------------------------------------------------------------------------------------------------------------------------
# !                                                                                      ARRAY
# >----------------------------------------------------------   ------------------------------------------------------------------------------------------------------------------------
# os=("ubnutu" "windows" "kali")

# os[3]='mac' #Add Element

# os[0]='linux' #Update Element

# unset os[0] #Remove Element

# echo "print all Usd @ =>" ${os[@]}

# echo "index 0 Is =>" ${os[0]}
# echo "index 1 Is =>" ${os[1]}
# echo "index 2 Is =>" ${os[2]}
# echo "index 3 Is =>" ${os[3]}

# echo "index all Array Usd ! =>" ${!os[@]}

# echo "Numbers Array Usd # =>" ${#os[@]}
